import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { router } from './services';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

// ‰∏≠Èó¥‰ª∂
app.use(cors());
app.use(express.json({ limit: '10mb' })); // Ê∑ªÂä†Â§ßÂ∞èÈôêÂà∂
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ËØ∑Ê±ÇIDÂíåÂìçÂ∫îÊó∂Èó¥ËøΩË∏™
app.use((req: Request, res: Response, next: NextFunction) => {
  const requestId = Math.random().toString(36).substring(7);
  const startTime = Date.now();

  // Â∞Ü requestId Ê∑ªÂä†Âà∞ËØ∑Ê±ÇÂØπË±°
  (req as any).requestId = requestId;

  // ÂøΩÁï•ÊµèËßàÂô®Ëá™Âä®ËØ∑Ê±ÇÁöÑË∑ØÂæÑ
  const ignorePaths = [
    '/sw.js',
    '/favicon.ico',
    '/manifest.json',
    '/robots.txt',
  ];

  // ÂìçÂ∫îÁªìÊùüÊó∂ËÆ∞ÂΩïÊó•Âøó
  res.on('finish', () => {
    // ËøáÊª§Êéâ‰∏çÈúÄË¶ÅËÆ∞ÂΩïÁöÑË∑ØÂæÑ
    if (ignorePaths.includes(req.path)) {
      return;
    }

    const duration = Date.now() - startTime;
    const log = {
      timestamp: new Date().toISOString(),
      requestId,
      method: req.method,
      path: req.path,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      ip: req.ip,
    };
    console.log(JSON.stringify(log));
  });

  next();
});

// Ë∑ØÁî±
app.use('/', router);

// 404Â§ÑÁêÜ
app.use((req: Request, res: Response) => {
  res.status(404).json({ error: 'Not Found' });
});

// ÈîôËØØÂ§ÑÁêÜ
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  const requestId = (req as any).requestId || 'unknown';
  console.error(
    JSON.stringify({
      timestamp: new Date().toISOString(),
      requestId,
      error: err.message,
      stack: NODE_ENV === 'development' ? err.stack : undefined,
    }),
  );

  res.status(500).json({
    error: 'Internal Server Error',
    message: NODE_ENV === 'development' ? err.message : 'Something went wrong',
    requestId,
  });
});

// ÂêØÂä®ÊúçÂä°Âô®
const server = app.listen(PORT, () => {
  console.log(`üöÄ API Server running on http://localhost:${PORT}`);
  console.log(`üìù Health check: http://localhost:${PORT}/health`);
  console.log(`üìä API info: http://localhost:${PORT}/api/info`);
});

// ‰ºòÈõÖÂÖ≥Èó≠
const shutdown = () => {
  console.log('\n‚è≥ Shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server closed');
    process.exit(0);
  });

  // Ë∂ÖÊó∂Âº∫Âà∂ÂÖ≥Èó≠
  setTimeout(() => {
    console.error('‚ö†Ô∏è  Forced shutdown');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);
